 GNU nano 4.8                                                                                                                                                                                                                                                                                                                dqueue.c                                                                                                                                                                                                                                                                                                                          
#include<stdio.h>
int A[10],size,front,rare;

void push(int item){
int i;
if(front==-1&& rare==size-1){
                printf("the queue is full");


}else if(rare ==-1){
                front=0;
                rare=0;
                A[rare]=item;
                }else if(front >0){

                front--;
                A[front]=item;
                }else{

                        for(i=rare;i>=front;i--){
                                A[i+1]=A[i];
                                A[front]=item;
                                rare++;
                        }
                        }
                                                }
void pop(){


if(rare==-1){

        printf("the queue is empty");
        }else if(front == rare){
                front=-1;
                rare=-1;
                }else{
                        printf("deleted element is %d",A[front]);
                        front=front+1;
                        }


                        }

void  inject(int item){
 int i;
if(front==0 && rare==size-1){
                printf("the queue is full");
                }else if(rare==-1){
      front=0;
        rare=0;
    A[rare]=item;

                }else if(rare < size-1){
                rare++;
                A[rare]=item;

                        }else{  
                                for(i=front;i<=rare;i++){
                                        A[i-1]=A[i];
                                        A[rare]=item;
                                        front--;

                                        }
                                }
                }
 void eject(){
                if(front==-1){
                        printf("the queue is empty");

                        }else if(front==rare){
                        printf("the deleted element id %d",A[rare]);
                        front=-1;
                        rare=-1;
                                        }else{
                                                printf("the deleted element is %d",A[rare]);
                                                                rare--;
                                                                }


                }
 void display(){
  int i;
                if(rare==-1){
                        printf("the queue is empty");
                                }else{
                                for(i=front;i<=rare;i++){
                                                if(A[i]!=0)
                                        printf("%d\t",A[i]);
                                        }
                                        }

                        }
void main(){
        int item,opt;
        printf("enter the size of the queue");
        scanf("%d",&size);
        do{
                printf("enter the option");
                printf("1FOR PUSH \n 2 FOR POP \n  3 FOR  EJECT \n4 FOR REJECT \n 5 FOR DISPLAY \n 6  FOR EXIT");
                scanf("%d",&opt);
                switch(opt){ 
                case 1:
                        printf("enter the item to insert ");
                        scanf("%d",&item);
                        push(item);
                        break;
                        case 2:
                        pop();
                        break;
                        case 3:
                                printf("enter the item to insert on the rare");
